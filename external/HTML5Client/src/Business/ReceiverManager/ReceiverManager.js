function ReceiverManager(callback1) {
	var myself = this;
	var callback = callback1;
	var sessionArray = new Array(0);
	var idGenerator = 0;
	var clipMgr;
	var usbMgr;
	//0 define for non session by default(Chrome App clipboard treates as session and it contain session key 0)
	var sessionkeygenerator = 1;
	/*
	 * This variable is use to get session information
	 * ex-New application belongs to existing session or it is new onr
	 *
	 * it contain following field
	 * {sessionkey{generated by ReceiverManager} ,SessionsharingKey{come in ICA} ,TWIMode(In Ica ) , sslEnable + "<>" +connectAddress + "<>" + connectPort + "<>" }
	 */
	var sessionkeyContainer = new Array(0);
	var sessionkeycontainerlength = 0;
	this.processCommand = function(dataObj, winInstance) {
		if (dataObj['cmd'] === WorkerCommand.REGISTER_AS_NEW_INSTANCE) {
			winInstance.index = myself.getNextId();
			var sessionStruct = sessionArray[winInstance.sessionkey];
			var sessionStruct = sessionArray[winInstance.sessionkey];
			if (!sessionStruct && winInstance.sessionkey === 0) {
				sessionStruct = new SessionContainer(myself, callback);
				sessionArray[winInstance.sessionkey] = sessionStruct;
				sessionStruct.sessionkey = winInstance.sessionkey;
			}
			if (sessionStruct) {
				sessionStruct.registerNewWindow(winInstance);
			}

		} else if (dataObj['cmd'] === WorkerCommand.CMD_CLOSECURRENTTAB) {
		    usbMgr.releaseDevicesCloseSession(dataObj,winInstance);
			var count = winInstance.container.unregisterWindow(winInstance);
			if (count == 0) {
				sessionArray[winInstance.sessionkey] = null;
				if (checkforClose() === true) {
					closeSharedWorker();
				}
			}
		} else if (dataObj['source'] === DRIVERID.ID_UI) {
			handleUICommand(dataObj, winInstance);
		} else if (dataObj['source'] === DRIVERID.ID_SESSION_MANAGER) {
			handleSessionCommand(dataObj, winInstance);
		}
	};

	function checkforClose() {
		for (var key in sessionArray) {
			if (sessionArray.hasOwnProperty(key)) {
				if (sessionArray[key]) {
					return false;
				}
			}
		}
		return true;
	}


	this.setClipMgr = function(mgr) {
		clipMgr = mgr;
	};
	this.setUsbMgr = function(mgr) {
		usbMgr = mgr;
	};
	this.getNextId = function() {
		return idGenerator++;
	};
	function handleSessionCommand(dataObj, winInstance) {
		if (dataObj['cmd'] === WorkerCommand.SEAMLESS_CLIPBOARD_INIT || dataObj['cmd'] === WorkerCommand.SEAMLESS_CLIPBOARD_REQUESTC2W || dataObj['cmd'] === WorkerCommand.SEAMLESS_CLIPBOARD_RESPONSEC2W || dataObj['cmd'] === WorkerCommand.SEAMLESS_CLIPBOARD_NOTIFICATIONC2W) {
			clipMgr.processNextCmd(dataObj, winInstance);
		}else if(dataObj['cmd'] === WorkerCommand.SEAMLESS_USB_INIT || 		dataObj['cmd'] === WorkerCommand.SEAMLESS_USB_ADD_DEVICE|| dataObj['cmd'] === WorkerCommand.SEAMLESS_USB_UPDATE_DEVICE|| dataObj['cmd']===WorkerCommand.SEAMLESS_USB_RELEASE_DEVICES){
		  usbMgr.processNextCmd(dataObj, winInstance);
		} else if (dataObj['cmd'] === WorkerCommand.REGISTER_CLIPBOARD) {
			winInstance.clipinstance = true;
		}
		else if (dataObj['cmd'] === WorkerCommand.REGISTER_USB) {
			winInstance.usbinstance = true;
		}
	}

	function handleUICommand(dataObj, winInstance) {
		if (dataObj['cmd'] === WorkerCommand.REGISTER_SESSION) {
			if (dataObj['type']) {
				winInstance['type'] = dataObj['type'];
			}
		} else if (dataObj['cmd'] === WorkerCommand.SESSION_WINDOW_INFO) {
			var sessionkey = dataObj['sessionkey'];
			var sessionStruct = sessionArray[sessionkey];
			if (!sessionStruct) {
				sessionStruct = new SessionContainer(myself, callback);
				sessionArray[sessionkey] = sessionStruct;
				sessionStruct.sessionkey = sessionkey;
			}
			winInstance.sessionkey = sessionkey;
			sessionStruct.setConfiguration(dataObj);
		} else if (dataObj['cmd'] === WorkerCommand.CMD_CLOSECURRENTTAB) {
			writeHTML5Log(0, "SESSION:|:SESSION MANAGER:|:WINDOW:|:handleUICommand close window");
			winInstance.closeConnection();
		} else if (dataObj['cmd'] === WorkerCommand.REGISTER_SESSION_PORT) {
			var sessionStruct = sessionArray[winInstance.sessionkey];
			if (sessionStruct) {
				var winInstance1 = new WindowInstance(myself, dataObj['byref'][0]);
				winInstance1.type = "messageport";
				winInstance1.sessionkey = sessionStruct.sessionkey;
			}
		} else if (dataObj['cmd'] === WorkerCommand.REGISTER_CLIPBOARD) {
			winInstance.clipinstance = true;
		}else if (dataObj['cmd'] === WorkerCommand.REGISTER_USB) {
			winInstance.usbinstance = true;
		}else if(dataObj['cmd'] === WorkerCommand.REQUESRT_UNIQUE_ID){
			generateNewSessionId(dataObj, winInstance);
		}
	}

	function generateNewSessionId(dataObj, winInstance) {
		var url = dataObj['isSSLEnabled'] + "<>" + dataObj['connectAddress'] + "<>" + dataObj['connectPort'];
		var twimode = dataObj['TWIMode'];
		var key;
		var match = false;
		if (twimode === false || twimode == 'Off') {
	
		} else {
			for (var i = 0; i < sessionkeycontainerlength; i++) {
				var session = sessionkeyContainer[i];
				if ((session['connecturl'] === url) && (session['TWIMode'] === dataObj['TWIMode']) && (session['SessionsharingKey'] === dataObj['SessionsharingKey'])) {
					key = session['sessionkey'];
					match = true;
					break;
				}
			}
		}
		if (match === false) {
			key = sessionkeygenerator++;
			sessionkeyContainer[sessionkeycontainerlength++] = {
				'connecturl' : url,
				'TWIMode' : dataObj['TWIMode'],
				'SessionsharingKey' : dataObj['SessionsharingKey'],
				'sessionkey' : key
			};
		}
		winInstance.sendMessage({
			'cmd' : WorkerCommand.REPLY_UNIQUE_ID,
			'source' : DRIVERID.ID_RECEIVER_MANAGER,
			'destination' : DRIVERID.ID_SESSION_MANAGER,
			'sessionkey' : key
		});
	}

	this.sendClipboardData = function(dataObj, winInstance, sourceOnly) {
		if (sourceOnly === true) {
			for (var key in sessionArray) {
				if (sessionArray.hasOwnProperty(key)) {
					if (sessionArray[key] && (sessionArray[key].sessionkey === winInstance.sessionkey)) {
						sessionArray[key].sendClipboardData(dataObj, winInstance, sourceOnly);
						break;
					}
				}
			}
		} else {
			for (var key in sessionArray) {
				if (sessionArray.hasOwnProperty(key)) {
					if (sessionArray[key])
						sessionArray[key].sendClipboardData(dataObj, winInstance, sourceOnly);
				}
			}
		}
	};
	
	this.sendUSBData = function(dataObj, winInstance, sourceOnly) {
		if (sourceOnly === true) {
			for (var key in sessionArray) {
				if (sessionArray.hasOwnProperty(key)) {
					if (sessionArray[key] && (sessionArray[key].sessionkey === winInstance.sessionkey)) {
						sessionArray[key].sendUSBData(dataObj, winInstance, sourceOnly);
						break;
					}
				}
			}
		} else {
			for (var key in sessionArray) {
				if (sessionArray.hasOwnProperty(key)) {
					if (sessionArray[key])
						sessionArray[key].sendUSBData(dataObj, winInstance, sourceOnly);
				}
			}
		}
	};
	
	this.registerNewWindow = function(port, uiWrapper) {
		var winInstance = new WindowInstance(myself, port);
		winInstance.uiWrapper = uiWrapper;
		return winInstance;
	};
}

